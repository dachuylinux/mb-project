/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.mb.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.mb.model.SoKheUoc;
import com.mb.model.SoKheUocModel;
import com.mb.model.SoKheUocSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SoKheUoc service. Represents a row in the &quot;dm_sokheuoc&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SoKheUocModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SoKheUocImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SoKheUocImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SoKheUocModelImpl
	extends BaseModelImpl<SoKheUoc> implements SoKheUocModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a so khe uoc model instance should use the <code>SoKheUoc</code> interface instead.
	 */
	public static final String TABLE_NAME = "dm_sokheuoc";

	public static final Object[][] TABLE_COLUMNS = {
		{"soKheUocId", Types.BIGINT}, {"cauTruc", Types.VARCHAR},
		{"so", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("soKheUocId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cauTruc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("so", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dm_sokheuoc (soKheUocId LONG not null primary key,cauTruc VARCHAR(75) null,so INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table dm_sokheuoc";

	public static final String ORDER_BY_JPQL =
		" ORDER BY soKheUoc.soKheUocId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dm_sokheuoc.soKheUocId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.mb.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.mb.model.SoKheUoc"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.mb.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.mb.model.SoKheUoc"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.mb.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.mb.model.SoKheUoc"),
		true);

	public static final long CAUTRUC_COLUMN_BITMASK = 1L;

	public static final long SOKHEUOCID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SoKheUoc toModel(SoKheUocSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SoKheUoc model = new SoKheUocImpl();

		model.setSoKheUocId(soapModel.getSoKheUocId());
		model.setCauTruc(soapModel.getCauTruc());
		model.setSo(soapModel.getSo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SoKheUoc> toModels(SoKheUocSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SoKheUoc> models = new ArrayList<SoKheUoc>(soapModels.length);

		for (SoKheUocSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.mb.service.util.ServiceProps.get(
			"lock.expiration.time.com.mb.model.SoKheUoc"));

	public SoKheUocModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _soKheUocId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSoKheUocId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _soKheUocId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SoKheUoc.class;
	}

	@Override
	public String getModelClassName() {
		return SoKheUoc.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SoKheUoc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SoKheUoc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SoKheUoc, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((SoKheUoc)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SoKheUoc, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SoKheUoc, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SoKheUoc)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SoKheUoc, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SoKheUoc, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<SoKheUoc, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SoKheUoc, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SoKheUoc, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SoKheUoc, Object>>();
		Map<String, BiConsumer<SoKheUoc, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SoKheUoc, ?>>();

		attributeGetterFunctions.put(
			"soKheUocId",
			new Function<SoKheUoc, Object>() {

				@Override
				public Object apply(SoKheUoc soKheUoc) {
					return soKheUoc.getSoKheUocId();
				}

			});
		attributeSetterBiConsumers.put(
			"soKheUocId",
			new BiConsumer<SoKheUoc, Object>() {

				@Override
				public void accept(SoKheUoc soKheUoc, Object soKheUocId) {
					soKheUoc.setSoKheUocId((Long)soKheUocId);
				}

			});
		attributeGetterFunctions.put(
			"cauTruc",
			new Function<SoKheUoc, Object>() {

				@Override
				public Object apply(SoKheUoc soKheUoc) {
					return soKheUoc.getCauTruc();
				}

			});
		attributeSetterBiConsumers.put(
			"cauTruc",
			new BiConsumer<SoKheUoc, Object>() {

				@Override
				public void accept(SoKheUoc soKheUoc, Object cauTruc) {
					soKheUoc.setCauTruc((String)cauTruc);
				}

			});
		attributeGetterFunctions.put(
			"so",
			new Function<SoKheUoc, Object>() {

				@Override
				public Object apply(SoKheUoc soKheUoc) {
					return soKheUoc.getSo();
				}

			});
		attributeSetterBiConsumers.put(
			"so",
			new BiConsumer<SoKheUoc, Object>() {

				@Override
				public void accept(SoKheUoc soKheUoc, Object so) {
					soKheUoc.setSo((Integer)so);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSoKheUocId() {
		return _soKheUocId;
	}

	@Override
	public void setSoKheUocId(long soKheUocId) {
		_columnBitmask = -1L;

		_soKheUocId = soKheUocId;
	}

	@JSON
	@Override
	public String getCauTruc() {
		if (_cauTruc == null) {
			return "";
		}
		else {
			return _cauTruc;
		}
	}

	@Override
	public void setCauTruc(String cauTruc) {
		_columnBitmask |= CAUTRUC_COLUMN_BITMASK;

		if (_originalCauTruc == null) {
			_originalCauTruc = _cauTruc;
		}

		_cauTruc = cauTruc;
	}

	public String getOriginalCauTruc() {
		return GetterUtil.getString(_originalCauTruc);
	}

	@JSON
	@Override
	public int getSo() {
		return _so;
	}

	@Override
	public void setSo(int so) {
		_so = so;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SoKheUoc.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SoKheUoc toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SoKheUoc)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SoKheUocImpl soKheUocImpl = new SoKheUocImpl();

		soKheUocImpl.setSoKheUocId(getSoKheUocId());
		soKheUocImpl.setCauTruc(getCauTruc());
		soKheUocImpl.setSo(getSo());

		soKheUocImpl.resetOriginalValues();

		return soKheUocImpl;
	}

	@Override
	public int compareTo(SoKheUoc soKheUoc) {
		int value = 0;

		if (getSoKheUocId() < soKheUoc.getSoKheUocId()) {
			value = -1;
		}
		else if (getSoKheUocId() > soKheUoc.getSoKheUocId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SoKheUoc)) {
			return false;
		}

		SoKheUoc soKheUoc = (SoKheUoc)obj;

		long primaryKey = soKheUoc.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SoKheUocModelImpl soKheUocModelImpl = this;

		soKheUocModelImpl._originalCauTruc = soKheUocModelImpl._cauTruc;

		soKheUocModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SoKheUoc> toCacheModel() {
		SoKheUocCacheModel soKheUocCacheModel = new SoKheUocCacheModel();

		soKheUocCacheModel.soKheUocId = getSoKheUocId();

		soKheUocCacheModel.cauTruc = getCauTruc();

		String cauTruc = soKheUocCacheModel.cauTruc;

		if ((cauTruc != null) && (cauTruc.length() == 0)) {
			soKheUocCacheModel.cauTruc = null;
		}

		soKheUocCacheModel.so = getSo();

		return soKheUocCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SoKheUoc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SoKheUoc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SoKheUoc, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((SoKheUoc)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SoKheUoc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SoKheUoc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SoKheUoc, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SoKheUoc)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		SoKheUoc.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		SoKheUoc.class, ModelWrapper.class
	};

	private long _soKheUocId;
	private String _cauTruc;
	private String _originalCauTruc;
	private int _so;
	private long _columnBitmask;
	private SoKheUoc _escapedModel;

}